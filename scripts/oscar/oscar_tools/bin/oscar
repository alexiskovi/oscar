#!/usr/bin/env bash

###############################################################################
# Copyright 2019 Nikolay Dema. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

OSCAR_ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../../.." && pwd )"

OSCAR_SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

EXEC_PATH=$PWD

function docker_start() {
    cd $OSCAR_ROOT_DIR
    bash $OSCAR_ROOT_DIR/docker/scripts/dev_start.sh -b
    cd $EXEC_PATH
}

function docker_stop() {
    cd $OSCAR_ROOT_DIR
    bash $OSCAR_ROOT_DIR/docker/scripts/dev_start.sh stop
    cd $EXEC_PATH
}

function docker_into() {
    cd $OSCAR_ROOT_DIR
    bash $OSCAR_ROOT_DIR/docker/scripts/dev_into.sh
    cd $EXEC_PATH
}

function trajectory_generation() {
    cd $OSCAR_ROOT_DIR
    NUM_PROCESSES="$(pgrep -c -f "oscar_tools/trajectory_generator.py")"
    if [ "${NUM_PROCESSES}" -ne 0 ]; then
      pkill -SIGKILL -f oscar_tools/trajectory_generator.py
    fi

    python modules/tools/oscar_tools/trajectory_generator.py
    cd $EXEC_PATH
}

function trajectory_play() {
    cd $OSCAR_ROOT_DIR
    NUM_PROCESSES="$(pgrep -c -f "oscar_tools/trajectory_player.py")"
    if [ "${NUM_PROCESSES}" -ne 0 ]; then
      pkill -SIGKILL -f oscar_tools/trajectory_player.py
    fi

    python modules/tools/oscar_tools/trajectory_player.py
    cd $EXEC_PATH
}

function trajectory_stop() {
    pkill -SIGKILL -f oscar_tools/trajectory_player.py
}

function print_help() {
    printf "Possible arguments:\n"
    printf "oscar docker start - launches all apollo docker containers\n"
    printf "oscar docker stop  - stops all apollo docker containers\n"
    printf "oscar docker into  - open bash in apollo docker container\n"
    printf "\n"
    printf "oscar trajectory generate - generates\n"
    printf "oscar trajectory paly     - play\n"
    printf "oscar trajectory stop     - stops\n"
    printf "\n"
    printf "oscar help         - show this help\n"
}


if [ -z "$1" ]; then
  echo "No command passed\n"
  print_help
  exit 2
fi


if [ "$1" == "docker" ]; then
    if [ "$2" == "start" ]; then
        docker_start
    elif [ "$2" == "stop" ]; then
        docker_stop
    elif [ "$2" == "into" ]; then
        docker_into
    else
        printf "Possible arguments:\n"
        printf "start - launches all apollo docker containers\n"
        printf "stop -  stops all apollo docker containers\n"
        printf "into -  open bash in apollo docker container\n"
    fi


elif [ "$1" == "trajectory" ]; then
    if [ "$2" == "generate" ]; then
        trajectory_generation
    elif [ "$2" == "play" ]; then
        trajectory_play
    elif [ "$2" == "stop" ]; then
        trajectory_stop
    else
        printf "Possible arguments:\n"
        printf "generate - generates\n"
        printf "paly     - play\n"
        printf "stop     - stops\n"
    fi

elif [ "$1" == "help" ]; then
    print_help

else
    print_help
fi
